php: |
  <?php

  namespace N;

  use Acme\Plant;
  use const PHP_VERSION_ID;

  if (PHP_VERSION_ID < 80000) {
    require_once __DIR__ . '/other_file.php';
  }

  $hello = "hello";
  $world = 'world';
  $helloworld = "$hello $world";

  $f = static function ($x, $y) use ($helloworld) {return $x;};
  $f = function () {};

  /**
   * Function with doc comment.
   */
  function foo(
    int $x = 5,
    # A non-attribute comment.
    #[A]
    bool $negative,
  ): int {
    if ($negative) {
      return -$x;
    }
    else {
      return $x;
    }
  }

  function f(array &$x, \Acme\Animal ...$args) {}

  #[A(self::class)]
  class C extends B implements I, J {
    public const EXAMPLE = 5;
    private const X = 'x', YY = 'y' . ('y' . '');
    protected $m = 5;
    #[A('class: ' . self::class)]
    private $a = 7, $b = 8 + (9 / 3);
    #[A(self::class)]
    public ?int $n;
    #[A(5)]
    public function __construct(private int $x) {}
    private function f(?int $x) {
      return $x ?? 5;
    }
  }
importss:
  N\foo():
    Plant: Acme\Plant
    'const PHP_VERSION_ID': PHP_VERSION_ID
  N\f():
    Plant: Acme\Plant
    'const PHP_VERSION_ID': PHP_VERSION_ID
  N\C:
    Plant: Acme\Plant
    'const PHP_VERSION_ID': PHP_VERSION_ID
attributess:
  N\foo(): {  }
  N\foo($x): {  }
  N\foo($negative):
    -
      name: N\A
      arguments: {  }
  N\f(): {  }
  N\f($x): {  }
  N\f($args): {  }
  N\C:
    -
      name: N\A
      arguments:
        - N\C
  'N\C::EXAMPLE': {  }
  'N\C::X': {  }
  'N\C::YY': {  }
  'N\C::$m': {  }
  'N\C::$a':
    -
      name: N\A
      arguments:
        - 'class: N\C'
  'N\C::$b':
    -
      name: N\A
      arguments:
        - 'class: N\C'
  'N\C::$n':
    -
      name: N\A
      arguments:
        - N\C
  'N\C::__construct()':
    -
      name: N\A
      arguments:
        - 5
  'N\C::__construct($x)': {  }
  'N\C::f()': {  }
  'N\C::f($x)': {  }
